package com.ftrue.day07.demo01;

/**
 * @ClassName OOPDemo01
 * @Description 此类用于演示功能
 * @Author Shark
 * @DateTime 2021年07月05日 09时02分
 * @Version 1.0
 *
 * 面向对象(OOP Object Oriented Programming)
 *
 * 面向过程:
 *      强调的是"过程",偏重事情怎么做,把自己比喻为"执行者",基本单位:函数(方法)
 * 面向对象:
 *      强调的是"对象",偏重事情找谁做,把自己比喻为"指挥者",基本单位:类(对象所对应的类)
 *
 * 这两种思想没有好坏之分,都是人们解决问题的思考习惯
 *      面向过程往往解决的是一些较小的问题
 *      面向对象往往解决的是一些较大的问题
 *
 *
 * 类和对象的关系:
 *      类是对象的抽象,模板
 *      对象是类的实例,实体
 *
 *
 * 类的分类:
 *      1.API已经提供好的类(系统提供好的类)
 *      2.自定义的类
 *
 * 自定义类的设计
 *      位置:需要在测试类的外面设计对象所对应的类(需要单独的.java文件)
 *      测试类:含有main()的类称之为测试类
 *
 * 类的设计步骤:
 *      1.在class中添加实例内容(实例变量和实例方法),构成最基础的类
 *      2.在这个类的基础上,加入"封装"思想
 *      3.在这个类的基础上,加入"构造器"的概念,形成标准类(JavaBean)
 *      4.在标准类的基础上,加入"静态"的概念
 *      5.在标准类的基础上,进行拆分,加入"继承"的思想
 *      6.在标准类的基础上,加入"抽象"的概念
 *      7.在标准类的基础上,再进行拆分,加入"接口"的概念
 *      8.在标准类的基础上,加入"内部类"的概念
 *      9.在标准类的基础上,加入"代码块"的概念
 *
 *
 * 基础类的格式:
 *      public class 类名 {
 *          实例变量
 *          实例方法
 *      }
 *
 *      成员变量(全局变量)
 *          含义:声明在类中方法外的变量,包含实例变量和静态变量
 *          实例变量(对象变量):
 *              声明在类中方法外,且没有static关键字修饰的变量,变量属于对象
 *          静态变量(类变量)
 *              声明在类中方法外,含有static关键字修饰的变量,变量属于类
 *
 *      成员方法
 *          含义:声明在类中的方法,包含实例方法和静态方法
 *          实例方法(对象方法)
 *              声明在类中,且没有static关键字修饰的方法,方法属于对象
 *          静态变量(类方法)
 *              声明在类中,且含有static关键字修饰的方法,方法属于类
 *
 * 对象的创建
 *      位置:在测试类中进行对象的创建
 *
 *      格式:
 *          类名 对象名 = new 类名();
 *
 * 对象的使用:
 *      使用对象的属性
 *          对象名.实例变量名
 *      使用对象的方法
 *          对象名.实例方法名();
 *
 * 学习面向对象的小技巧:
 *      1.先看是否存在合适对象所对象的类
 *          如果有,直接第2步
 *          如果没有,自定义
 *      2.通过类的构造器创建对象
 *      3.通过对象的方法完成需求
 */
public class OOPDemo01 {
	public static void main(String[] args) {
		//创建学生对象
		Student s1 = new Student();

		//打印对象的名字
		System.out.println(s1);

		//打印对象的基本信息
		System.out.println(s1.name);
		System.out.println(s1.age);

		//给学生对象进行赋值
		s1.name = "张小芳";
		s1.age = 18;

		//打印对象的基本信息
		System.out.println(s1.name);
		System.out.println(s1.age);

		//调用对象的方法
		s1.study();

		System.out.println("===================================");

		Student s2 = new Student();

		s2.study();

	}
}
