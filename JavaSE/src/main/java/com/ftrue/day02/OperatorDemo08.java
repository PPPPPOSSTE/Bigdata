package com.ftrue.day02;

/*
	原码,反码,补码都是计算机中对数字的二进制定点表示方法

	原码:计算机中看见的数据的二进制
	反码:在计算机中,将所有原码和补码进行转换的中间量
	补码:在计算机中，所有的数据的计算都是以数据的补码的形式进行计算的。

	原,反,补码运算规则:
		如果数据是正整数,数据的原反补是一样
		如果数据是负整数,
			原码:在普通二进制的基础上,增加符号位,正数为0,负数为1
			反码:在原码的基础上进行取反,符号位保持不变
			补码:在反码的基础上进行+1运算

	int类型130的原码:00000000 00000000 00000000 10000010
	int类型130的反码:00000000 00000000 00000000 10000010
	int类型130的补码:00000000 00000000 00000000 10000010
	针对补码进行强转:
	byte类型结果的补码:10000010
	byte类型结果的反码:10000001
	byte类型结果的原码:11111110(-126)

	位运算符:
		& | ^ ~ << >> >>>

	& | ^ 这三个运算符是所有运算符中的"墙头草",当这三个符号两边的结果是布尔值,就是逻辑运算符,如果两边是数据值,就是位运算符

		&:按位与，当两位相同时为1时才返回1
		|:按位或，只要有一位为1即可返回1
		^:按位异或。当两位相同时返回0，不同时返回1（包括符号位）
		~:按位非，将操作数的每个位（包括符号位）全部取反
		<<:左移运算符 将指定的数据往左移动指定的位数
			格式:指定的数据 << 指定的位数
			特点:当低位出现了空位,直接进行补0,符号位也随之移动
		>>:右移运算符 将指定的数据往右移动指定的位数
			格式:指定的数据 >> 指定的位数
			特点:当高位出现了空位,直接补和符号位相同的数字
		>>>:无符号右移 将指定的数据往右移动指定的位数
			格式:指定的数据 >>> 指定的位数
			特点:当高位出现了空位,不需要考虑符号位,直接补0,符号位也随之移动

	学习位运算符的目的:
		1.笔试题
		2.源码
*/


public class OperatorDemo08 {
	public static void main (String[] args) {
		//byte num = (byte)130;

		//&:按位与，当两位相同时为1时才返回1
		System.out.println(5 & 9);//1
		System.out.println(-5 & -9);
		System.out.println("=============================");
		//|:按位或，只要有一位为1即可返回1
		System.out.println(5 | 9);
		System.out.println(-5 | -9);
		System.out.println("=============================");
		//^:按位异或。当两位相同时返回0，不同时返回1
		System.out.println(5 ^ 9);
		System.out.println(-5 ^ -9);
		System.out.println("=============================");
		//~:按位非，将操作数的每个位（包括符号位）全部取反
		System.out.println(~5);
		System.out.println(~-5);
		System.out.println("=============================");
		System.out.println(5 << 2);
		System.out.println(-5 << 2 );

		//System.out.println(1073741823 << 2);
		System.out.println("=============================");
		System.out.println(5 >> 2);
		System.out.println(-5 >> 2);

		System.out.println("=============================");

		System.out.println(5 >>> 2);
		System.out.println(-5 >>> 2);
	}
}